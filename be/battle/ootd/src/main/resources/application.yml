server:
  port: 0  # TODO: 서버 포트 환경변수로 관리 (SERVER_PORT)

spring:
  application:
    name: battle-service

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3308/battle_db?autoReconnect=true&useUnicode=true&characterEncoding=utf-8  # TODO: 데이터베이스 URL을 환경변수로 관리 (DB_URL)
    username: root  # TODO: 데이터베이스 사용자명을 환경변수로 관리 (DB_USERNAME)
    password: 0oTd!  # TODO: 데이터베이스 비밀번호를 환경변수로 관리 (DB_PASSWORD)

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: create
      dialect: org.hibernate.dialect.MySQLDialect
      format_sql: true

  kafka:
    bootstrap-servers: kafka1:9092  # Kafka 서버 주소  # TODO: Kafka 서버 주소를 환경변수로 관리 (KAFKA_BOOTSTRAP_SERVERS)

    template:
      # Producer topics
      from-battle-to-user: from_battle_to_user
      from-battle-to-gallery: from_battle_to_gallery

      # Consumer topics
      from-user-to-battle: from_user_to_battle
      from-gallery-to-battle: from_gallery_to_battle

    consumer:
      # Consumer group
      group-battle: battle  # TODO: Kafka 컨슈머 그룹을 환경변수로 관리 (KAFKA_CONSUMER_GROUP)

  quartz:
    job-store-type: jdbc
    jdbc:
      initialize-schema: always
    properties:
      org:
        quartz:
          scheduler:
            instanceName: BattleScheduler  # TODO: Quartz 스케줄러 인스턴스명을 환경변수로 관리 (QUARTZ_INSTANCE_NAME)
          jobStore:
            class: org.quartz.impl.jdbcjobstore.JobStoreTX
            driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
            tablePrefix: QRTZ_  # TODO: Quartz 테이블 접두사를 환경변수로 관리 (QUARTZ_TABLE_PREFIX)
          threadPool:
            threadCount: 5  # TODO: Quartz 스레드 풀의 스레드 개수를 환경변수로 관리 (QUARTZ_THREAD_COUNT)

eureka:
  instance:
    prefer-ip-address: true  # IP 주소를 우선 사용하여 Eureka에 등록
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/  # 유레카 서버 주소  # TODO: Eureka 서버 주소를 환경변수로 관리 (EUREKA_SERVER_URL)
    register-with-eureka: true  # Eureka에 서비스 등록 활성화
    fetch-registry: true  # Eureka에서 레지스트리 가져오기 활성화
